let o = {}; const e = { submenu: { up: { label: "Weapons & Tools", icon: "hammer", color: [255, 255, 0], submenu: { up: { label: "Melee Weapons", icon: "swords", color: [200, 200, 200], submenu: { up: { label: "Diamond Sword", icon: "sword", color: [0, 255, 255], action: "giveDiamondSword" }, right: { label: "Iron Axe", icon: "axe", color: [210, 210, 210], action: "giveIronAxe" }, left: { label: "Trident", icon: "t", color: [0, 200, 150], action: "giveTrident" }, down: { label: "Back", icon: "rotate-left", color: [255, 100, 100], action: "navigateBack" } } }, right: { label: "Ranged Weapons", icon: "bow-arrow", color: [150, 100, 50], submenu: { up: { label: "Bow & Arrows", icon: "bow-arrow", color: [255, 255, 0], action: "giveBowAndArrows" }, right: { label: "Snowballs", icon: "snowflake", color: [255, 255, 255], action: "giveSnowballs" }, left: { label: "Crossbow", icon: "crosshairs", color: [180, 140, 90], action: "giveCrossbow" }, down: { label: "Back", icon: "rotate-left", color: [255, 100, 100], action: "navigateBack" } } }, left: { label: "Tools", icon: "pickaxe", color: [100, 150, 200], submenu: { up: { label: "Diamond Pickaxe", icon: "pickaxe", color: [0, 255, 255], action: "giveDiamondPickaxe" }, right: { label: "Fishing Rod", icon: "fishing-rod", color: [150, 100, 50], action: "giveFishingRod" }, left: { label: "Diamond Shovel", icon: "shovel", color: [0, 255, 255], action: "giveDiamondShovel" }, down: { label: "Back", icon: "rotate-left", color: [255, 100, 100], action: "navigateBack" } } }, down: { label: "Back", icon: "rotate-left", color: [255, 100, 100], action: "navigateBack" } } }, right: { label: "Shop & Actions", icon: "shopping-cart", color: [0, 150, 255], submenu: { up: { label: "Special Actions", icon: "wand-sparkles", color: [255, 0, 255], submenu: { up: { label: "High Jump", icon: "angles-up", color: [0, 255, 0], action: "actionHighJump" }, right: { label: "Heal Self", icon: "heart-plus", color: [255, 100, 100], action: "actionHeal" }, left: { label: "Particle Burst", icon: "sparkles", color: [255, 255, 0], action: "actionParticleBurst" }, down: { label: "Back", icon: "rotate-left", color: [255, 100, 100], action: "navigateBack" } } }, right: { label: "Sell Items", icon: "receipt", color: [255, 180, 50], submenu: { up: { label: "Sell Ores", icon: "gem", color: [200, 200, 200], action: "sellOres" }, right: { label: "Sell Blocks", icon: "cubes", color: [139, 69, 19], action: "sellBlocks" }, left: { label: "Sell Farmables", icon: "wheat-awn", color: [245, 222, 179], action: "sellFarmables" }, down: { label: "Back", icon: "rotate-left", color: [255, 100, 100], action: "navigateBack" } } }, left: { label: "Buy Effects", icon: "flask-potion", color: [150, 50, 255], submenu: { up: { label: "Speed Boost", icon: "forward-fast", color: [0, 255, 255], action: "buySpeedBoost" }, right: { label: "Jump Boost", icon: "person-falling-burst", color: [0, 255, 0], action: "buyJumpBoost" }, left: { label: "Invisibility", icon: "user-secret", color: [180, 180, 180], action: "buyInvisibility" }, down: { label: "Back", icon: "rotate-left", color: [255, 100, 100], action: "navigateBack" } } }, down: { label: "Back", icon: "rotate-left", color: [255, 100, 100], action: "navigateBack" } } }, left: { label: "Player Interactions", icon: "user-group", color: [0, 255, 0], submenu: { up: { label: "Teleport to Player", icon: "location-crosshairs", color: [0, 200, 255], action: "interactTeleport" }, right: { label: "Gift Money", icon: "coins", color: [255, 215, 0], action: "interactGift" }, left: { label: "View Profile", icon: "address-card", color: [200, 200, 200], action: "interactViewProfile" }, down: { label: "Back", icon: "rotate-left", color: [255, 100, 100], action: "navigateBack" } } }, down: { label: "Close Menu", icon: "x", color: [255, 0, 0], action: "closeMenu" } } }, l = { closeMenu: o => { n(o) }, navigateBack: e => { const l = o[e]; if (l && l.history.length > 1) { l.history.pop(); r(e, l.history[l.history.length - 1]) } else n(e) }, giveDiamondSword: o => { a(o, "Gave Player a Diamond Sword") }, giveIronAxe: o => { a(o, "Gave Player an Iron Axe") }, giveTrident: o => { a(o, "Gave Player a Trident") }, giveBowAndArrows: o => { a(o, "Gave Player a Bow and Arrows") }, giveSnowballs: o => { a(o, "Gave Player 16 Snowballs") }, giveCrossbow: o => { a(o, "Gave Player a Crossbow") }, giveDiamondPickaxe: o => { a(o, "Gave Player a Diamond Pickaxe") }, giveFishingRod: o => { a(o, "Gave Player a Fishing Rod") }, giveDiamondShovel: o => { a(o, "Gave Player a Diamond Shovel") }, actionHighJump: o => { a(o, "Player performed High Jump") }, actionHeal: o => { a(o, "Player Healed") }, actionParticleBurst: o => { a(o, "Player created a Particle Burst") }, sellOres: o => { a(o, "Player would sell ores") }, sellBlocks: o => { a(o, "Player would sell blocks") }, sellFarmables: o => { a(o, "Player would sell farmables") }, buySpeedBoost: o => { a(o, "Player bought Speed Boost") }, buyJumpBoost: o => { a(o, "Player bought Jump Boost") }, buyInvisibility: o => { a(o, "Player bought Invisibility") }, interactTeleport: o => { a(o, "Player would teleport to someone") }, interactGift: o => { a(o, "Player would gift money") }, interactViewProfile: o => { a(o, "Player would view a profile") } }; function a(o, e) { api.log(`[MENU ACTION] Player ${api.getEntityName(o)}: ${e}`), n(o, "Action Performed") } const i = (o, e) => o[0] * e[0] + o[2] * e[2], t = o => { const e = Math.sqrt(o[0] * o[0] + o[2] * o[2]); return 0 === e ? [0, 0, 0] : [o[0] / e, 0, o[2] / e] }; function n(e, l = "Menu Closed") { o[e] && (api.setClientOptionToDefault(e, "jumpAmount"), api.setClientOptionToDefault(e, "speedMultiplier"), api.setClientOption(e, "middleTextLower", ""), delete o[e], api.sendFlyingMiddleMessage(e, [l], 100)) } function r(e, l) { o[e].currentMenuNode = l; const a = l.submenu || {}, i = { up: a.up, down: a.down, left: a.left, right: a.right }, t = o => { const e = `#${o.color.map((o => o.toString(16).padStart(2, "0"))).join("")}`, l = { str: " " + o.label, style: { color: e, fontWeight: "bold" } }; return o.icon ? [{ icon: o.icon, style: { color: e } }, l] : [l] }, n = t(i.up), r = t(i.down), c = t(i.left), s = t(i.right), u = [...n, "\n", ...[...c, { str: " ".repeat(4) }, ...s], "\n", ...r]; api.setClientOption(e, "middleTextLower", u) } function c(e, a) { if (a) if (a.submenu) o[e].history.push(a), r(e, a), o[e].ignoreNextStop = !0; else if (a.action) { const o = l[a.action]; o ? o(e) : (api.log(`Error: No action handler found for '${a.action}'`), n(e, "Menu Error")) } } tick = () => { for (const e in o) { const l = o[e], a = api.getPosition(e); if (a[0] !== l.lastPos[0] || a[2] !== l.lastPos[2]) { const o = [a[0] - l.lastPos[0], 0, a[2] - l.lastPos[2]], n = t(api.getPlayerFacingInfo(e).dir), r = t([n[2], 0, -n[0]]), c = t(o), s = i(c, n), u = i(c, r), d = 1.5; let p = null; Math.abs(s) > Math.abs(u) * d ? p = s > 0 ? "up" : "down" : Math.abs(u) > Math.abs(s) * d && (p = u > 0 ? "right" : "left"), p && (l.pendingGesture = p) } else if (l.ignoreNextStop) l.ignoreNextStop = !1, l.pendingGesture = null; else if (l.pendingGesture) { const o = l.pendingGesture; l.pendingGesture = null; c(e, l.currentMenuNode.submenu[o]) } l.lastPos = a } }, onPlayerClick = (l, a) => { const i = o[l]; if (i) { if (a || i.history.length <= 1) return n(l) } else api.setClientOption(l, "jumpAmount", 1), api.setClientOption(l, "speedMultiplier", .05), o[l] = { lastPos: api.getPosition(l), history: [e], currentMenuNode: e, pendingGesture: null, ignoreNextStop: !0 }, r(l, e) }, onPlayerJump = e => { o[e] && n(e, "Menu Closed") }, onPlayerLeave = e => { o[e] && delete o[e] };